#! /usr/bin/env python
#
# Licensed under the MIT license
# http://opensource.org/licenses/mit-license.php

# Copyright 2006,2007,2008 Frank Scholz <coherence@beebits.net>

import os, sys

from twisted.python import usage


from coherence import __version__

from coherence.extern.config import Config

"""
 thankfully taken from twisted.scripts._twistd_unix.py
"""
def daemonize():
    # See http://www.erlenstar.demon.co.uk/unix/faq_toc.html#TOC16
    if os.fork():   # launch child and...
        os._exit(0) # kill off parent
    os.setsid()
    if os.fork():   # launch child and...
        os._exit(0) # kill off parent again.
    os.umask(077)
    null=os.open('/dev/null', os.O_RDWR)
    for i in range(3):
        try:
            os.dup2(null, i)
        except OSError, e:
            if e.errno != errno.EBADF:
                raise
    os.close(null)


def setConfigFile():
    def findConfigDir():
        try:
            configDir = os.path.expanduser('~')
        except:
            configDir = os.getcwd()
        return configDir

    return os.path.join( findConfigDir(), '.coherence')


class Options(usage.Options):

    optFlags = [['daemon','d', 'daemonize'],
                ['version','v', 'print out version']
                ]
    optParameters = [['configfile', 'c', setConfigFile(), 'path to configfile'],
                     ['logfile', 'l', None, 'path to logfile'],
                     ['plugin', 'p', None, 'activate plugin']
                    ]

    def opt_version(self):
        print "Coherence version:", __version__
        sys.exit(0)

def main(config):

    from coherence.base import Coherence

    c = Coherence(config)
    #c = Coherence(plugins={'FSStore': {'content_directory':'tests/content'},
    #                       'Player': {})
    #c.add_plugin('FSStore', content_directory='tests/content', version=1)

if __name__ == '__main__':

    options = Options()
    try:
        options.parseOptions()
    except usage.UsageError, errortext:
        print '%s: %s' % (sys.argv[0], errortext)
        print '%s: Try --help for usage details.' % (sys.argv[0])
        sys.exit(0)

    if options['daemon'] == 1:
        daemonize()

    config = {}

    try:
        config = Config(options['configfile'])
    except SyntaxError:
        import traceback
        #print traceback.format_exc()
        try:
            from configobj import ConfigObj
            config = ConfigObj(options['configfile'])
        except:
            print "hmm, seems we are in trouble reading in any sort of config file"
            print traceback.format_exc()

    except IOError:
        print "no config file %r found" % options['configfile']
        pass

    #print config

    config['logfile'] = options['logfile']

    if options['daemon'] == 1:
        if options['logfile'] == None:
            config['logmode'] = 'none'

    if config.get('use_dbus', 'no') == 'yes':
        try:
            from twisted.internet import glib2reactor
            glib2reactor.install()
        except AssertionError:
            print "error installing glib2reactor"

    if options['plugin'] != None:
        plugins = config.get('pluginlist')
        if plugins is None:
            plugins = config.get('plugins',None)
        if plugins == None:
            config['pluginlist'] = []
            plugins = config['pluginlist']

        plugin = {}
        plugin_conf = options['plugin'].split(',')
        for pair in plugin_conf:
            pair = pair.split(':',1)
            if len(pair) == 2:
                plugin[pair[0]] = pair[1]
        plugins.append(plugin)



    from twisted.internet import reactor

    reactor.callWhenRunning(main, config)
    reactor.run()
